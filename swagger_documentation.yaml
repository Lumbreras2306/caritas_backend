openapi: 3.0.3
info:
  title: API de Caritas - Sistema de Gestión de Albergues
  description: |
    API REST para la gestión de albergues, servicios, inventario y usuarios.
    Sistema desarrollado para la organización Caritas.
    
    ## Características principales:
    - Gestión de albergues y ubicaciones
    - Sistema de reservas
    - Control de inventario
    - Gestión de usuarios
    - Sistema de autenticación
    
    ## Documentación local:
    - Página principal: http://localhost:8000/
    - Swagger UI: http://localhost:8000/swagger/
    - ReDoc: http://localhost:8000/redoc/
    
  version: 1.0.0

servers:
  - url: http://localhost:8000
    description: Servidor de desarrollo

tags:
  - name: Usuarios
    description: Gestión de usuarios, administradores y autenticación
  - name: Albergues  
    description: Gestión de albergues, ubicaciones y reservas de alojamiento
  - name: Servicios
    description: Gestión de servicios, horarios y reservas de servicios
  - name: Inventario
    description: Control de inventario, artículos y stock

paths:
  # ========================================================================
  # MÓDULO DE USUARIOS
  # ========================================================================
  
  /api/users/pre-register/:
    get:
      tags: [Usuarios]
      summary: Lista pre-registros
      description: Obtiene lista paginada de pre-registros de usuarios. Soporta filtros por status, gender, age y búsqueda por nombre, apellido o teléfono
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
        - name: gender
          in: query
          schema:
            type: string
            enum: [M, F]
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPreRegisterUsers'
        '400':
          description: Parámetros inválidos
        '401':
          description: No autorizado
    
    post:
      tags: [Usuarios]
      summary: Crear pre-registro
      description: Crea un nuevo pre-registro de usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreRegisterUserCreate'
      responses:
        '201':
          description: Pre-registro creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreRegisterUser'
        '400':
          description: Datos inválidos

  /api/users/pre-register/{id}/:
    get:
      tags: [Usuarios]
      summary: Detalle de pre-registro
      description: Obtiene el detalle de un pre-registro específico
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Pre-registro obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreRegisterUser'
        '404':
          description: Pre-registro no encontrado

    patch:
      tags: [Usuarios]
      summary: Actualizar pre-registro
      description: Actualiza parcialmente un pre-registro
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreRegisterUserUpdate'
      responses:
        '200':
          description: Pre-registro actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreRegisterUser'
        '400':
          description: Datos inválidos
        '404':
          description: Pre-registro no encontrado

    delete:
      tags: [Usuarios]
      summary: Eliminar pre-registro
      description: Elimina un pre-registro específico
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Pre-registro eliminado exitosamente
        '404':
          description: Pre-registro no encontrado

  /api/users/pre-register/verify-phone/:
    post:
      tags: [Usuarios]
      summary: Verificar teléfono de pre-registro
      description: Verifica si existe un pre-registro con el número de teléfono proporcionado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone_number]
              properties:
                phone_number:
                  type: string
                  description: Número de teléfono a verificar
                  example: "+52 1234567890"
      responses:
        '200':
          description: Verificación completada
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    description: Indica si existe el pre-registro
                  pre_register:
                    $ref: '#/components/schemas/PreRegisterUser'
        '400':
          description: Datos inválidos

  /api/users/pre-register/approve/:
    post:
      tags: [Usuarios]
      summary: Aprobar múltiples pre-registros
      description: Aprueba múltiples pre-registros de forma masiva
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [pre_register_ids]
              properties:
                pre_register_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Lista de IDs de pre-registros a aprobar
      responses:
        '200':
          description: Pre-registros aprobados exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  approved_count:
                    type: integer
                    description: Cantidad de pre-registros aprobados
                  failed_count:
                    type: integer
                    description: Cantidad de pre-registros que fallaron
        '400':
          description: Datos inválidos

  /api/users/customers/:
    get:
      tags: [Usuarios]
      summary: Lista usuarios finales
      description: Obtiene lista paginada de usuarios finales
      parameters:
        - name: gender
          in: query
          schema:
            type: string
            enum: [M, F]
        - name: is_active
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomUsers'

    post:
      tags: [Usuarios]
      summary: Crear usuario final
      description: Crea un nuevo usuario final
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserCreate'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
        '400':
          description: Datos inválidos

  /api/users/customers/{id}/:
    get:
      tags: [Usuarios]
      summary: Detalle de usuario final
      description: Obtiene el detalle de un usuario final específico
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Usuario obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
        '404':
          description: Usuario no encontrado

  /api/users/customers/deactivate-multiple/:
    post:
      tags: [Usuarios]
      summary: Desactivar múltiples usuarios
      description: Desactiva múltiples usuarios finales de forma masiva
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_ids]
              properties:
                user_ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Lista de IDs de usuarios a desactivar
      responses:
        '200':
          description: Usuarios desactivados exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  deactivated_count:
                    type: integer
                    description: Cantidad de usuarios desactivados
                  failed_count:
                    type: integer
                    description: Cantidad de usuarios que fallaron
        '400':
          description: Datos inválidos

  /api/users/admins/:
    get:
      tags: [Usuarios]
      summary: Lista administradores
      description: Obtiene lista paginada de administradores
      parameters:
        - name: is_active
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAdminUsers'

    post:
      tags: [Usuarios]
      summary: Crear administrador
      description: Crea un nuevo administrador
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserCreate'
      responses:
        '201':
          description: Administrador creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '400':
          description: Datos inválidos

  /api/users/auth/admin-login/:
    post:
      tags: [Usuarios]
      summary: Login de administrador
      description: Autentica un administrador en el sistema
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLogin'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminLoginResponse'
        '400':
          description: Credenciales inválidas

  /api/users/auth/admin-logout/:
    post:
      tags: [Usuarios]
      summary: Logout de administrador
      description: Cierra la sesión de un administrador
      responses:
        '200':
          description: Logout exitoso
        '401':
          description: No autorizado

  /api/users/auth/token/:
    post:
      tags: [Usuarios]
      summary: Obtener token de autenticación estándar DRF
      description: Obtiene un token de autenticación usando las credenciales de usuario (endpoint estándar de Django REST Framework)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, password]
              properties:
                username:
                  type: string
                  description: Nombre de usuario
                password:
                  type: string
                  description: Contraseña
      responses:
        '200':
          description: Token obtenido exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Token de autenticación
        '400':
          description: Credenciales inválidas

  /api/users/phone-verification/send/:
    post:
      tags: [Usuarios]
      summary: Enviar código de verificación SMS
      description: Envía un código de verificación SMS usando Twilio Verify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone_number]
              properties:
                phone_number:
                  type: string
                  description: Número de teléfono a verificar
                  example: "+52 1234567890"
      responses:
        '200':
          description: Código enviado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de confirmación
                  phone_number:
                    type: string
                    description: Número de teléfono verificado
                  verification_sid:
                    type: string
                    description: ID de verificación de Twilio
        '400':
          description: Datos inválidos
        '500':
          description: Error del servidor

  /api/users/phone-verification/verify/:
    post:
      tags: [Usuarios]
      summary: Verificar código SMS
      description: Verifica el código SMS y retorna token de autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone_number, code]
              properties:
                phone_number:
                  type: string
                  description: Número de teléfono
                  example: "+52 1234567890"
                code:
                  type: string
                  description: Código de verificación recibido por SMS
                  example: "123456"
      responses:
        '200':
          description: Verificación exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Mensaje de confirmación
                  token:
                    type: string
                    description: Token de autenticación
                  user:
                    $ref: '#/components/schemas/CustomUser'
        '400':
          description: Código inválido o datos incorrectos
        '500':
          description: Error del servidor

  # ========================================================================
  # MÓDULO DE ALBERGUES
  # ========================================================================

  /api/albergues/locations/:
    get:
      tags: [Albergues]
      summary: Lista ubicaciones
      description: Obtiene lista paginada de ubicaciones
      parameters:
        - name: city
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLocations'

    post:
      tags: [Albergues]
      summary: Crear ubicación
      description: Crea una nueva ubicación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationCreate'
      responses:
        '201':
          description: Ubicación creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          description: Datos inválidos

  /api/albergues/hostels/:
    get:
      tags: [Albergues]
      summary: Lista albergues
      description: Obtiene lista paginada de albergues
      parameters:
        - name: is_active
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHostels'

    post:
      tags: [Albergues]
      summary: Crear albergue
      description: Crea un nuevo albergue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostelCreate'
      responses:
        '201':
          description: Albergue creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hostel'
        '400':
          description: Datos inválidos

  /api/albergues/hostels/{id}/:
    get:
      tags: [Albergues]
      summary: Detalle de albergue
      description: Obtiene el detalle de un albergue específico
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Albergue obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hostel'
        '404':
          description: Albergue no encontrado

  /api/albergues/reservations/:
    get:
      tags: [Albergues]
      summary: Lista reservas de alojamiento
      description: Obtiene lista paginada de reservas de alojamiento
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, cancelled, completed]
        - name: arrival_date
          in: query
          schema:
            type: string
            format: date
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHostelReservations'

    post:
      tags: [Albergues]
      summary: Crear reserva de alojamiento
      description: Crea una nueva reserva de alojamiento
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostelReservationCreate'
      responses:
        '201':
          description: Reserva creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostelReservation'
        '400':
          description: Datos inválidos

  /api/albergues/hostels/nearby/:
    get:
      tags: [Albergues]
      summary: Buscar albergues cercanos
      description: Busca albergues cercanos a una ubicación específica basada en coordenadas geográficas
      parameters:
        - name: lat
          in: query
          required: true
          schema:
            type: number
            format: float
          description: Latitud de la ubicación
        - name: lng
          in: query
          required: true
          schema:
            type: number
            format: float
          description: Longitud de la ubicación
        - name: radius
          in: query
          schema:
            type: number
            format: float
            default: 5
          description: Radio de búsqueda en kilómetros
      responses:
        '200':
          description: Albergues cercanos encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hostel'
        '400':
          description: Parámetros inválidos

  /api/albergues/hostels/{id}/availability/:
    get:
      tags: [Albergues]
      summary: Consultar disponibilidad de albergue
      description: Consulta la disponibilidad de espacios en un albergue para una fecha específica
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID del albergue
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Fecha para consultar disponibilidad (YYYY-MM-DD)
      responses:
        '200':
          description: Disponibilidad obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  men_available:
                    type: integer
                    description: Espacios disponibles para hombres
                  women_available:
                    type: integer
                    description: Espacios disponibles para mujeres
                  total_available:
                    type: integer
                    description: Total de espacios disponibles
        '404':
          description: Albergue no encontrado

  # ========================================================================
  # MÓDULO DE SERVICIOS
  # ========================================================================

  /api/services/services/:
    get:
      tags: [Servicios]
      summary: Lista servicios
      description: Obtiene lista paginada de servicios
      parameters:
        - name: is_active
          in: query
          schema:
            type: boolean
        - name: reservation_type
          in: query
          schema:
            type: string
            enum: [individual, family, group]
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedServices'

    post:
      tags: [Servicios]
      summary: Crear servicio
      description: Crea un nuevo servicio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreate'
      responses:
        '201':
          description: Servicio creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          description: Datos inválidos

  /api/services/hostel-services/:
    get:
      tags: [Servicios]
      summary: Lista servicios de albergues
      description: Obtiene lista de servicios disponibles en albergues
      parameters:
        - name: hostel
          in: query
          schema:
            type: string
            format: uuid
        - name: service
          in: query
          schema:
            type: string
            format: uuid
        - name: is_active
          in: query
          schema:
            type: boolean
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHostelServices'

    post:
      tags: [Servicios]
      summary: Asignar servicio a albergue
      description: Asigna un servicio específico a un albergue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostelServiceCreate'
      responses:
        '201':
          description: Servicio asignado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostelService'
        '400':
          description: Datos inválidos

  /api/services/reservations/:
    get:
      tags: [Servicios]
      summary: Lista reservas de servicios
      description: Obtiene lista paginada de reservas de servicios
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, confirmed, cancelled, completed]
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedServiceReservations'

    post:
      tags: [Servicios]
      summary: Crear reserva de servicio
      description: Crea una nueva reserva de servicio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReservationCreate'
      responses:
        '201':
          description: Reserva creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceReservation'
        '400':
          description: Datos inválidos

  /api/services/services/statistics/:
    get:
      tags: [Servicios]
      summary: Estadísticas de servicios
      description: Obtiene estadísticas generales de todos los servicios
      responses:
        '200':
          description: Estadísticas obtenidas exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_services:
                    type: integer
                    description: Total de servicios
                  active_services:
                    type: integer
                    description: Servicios activos
                  total_reservations:
                    type: integer
                    description: Total de reservas
                  reservations_by_status:
                    type: object
                    description: Reservas agrupadas por estado
        '401':
          description: No autorizado

  # ========================================================================
  # MÓDULO DE INVENTARIO
  # ========================================================================

  /api/inventory/items/:
    get:
      tags: [Inventario]
      summary: Lista artículos
      description: Obtiene lista paginada de artículos del inventario
      parameters:
        - name: category
          in: query
          schema:
            type: string
        - name: is_active
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedItems'

    post:
      tags: [Inventario]
      summary: Crear artículo
      description: Crea un nuevo artículo para el inventario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemCreate'
      responses:
        '201':
          description: Artículo creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Datos inválidos

  /api/inventory/items/categories/:
    get:
      tags: [Inventario]
      summary: Lista categorías únicas
      description: Obtiene una lista de todas las categorías únicas de artículos
      responses:
        '200':
          description: Categorías obtenidas exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["Alimentos", "Higiene", "Ropa", "Medicinas"]

  /api/inventory/items/units/:
    get:
      tags: [Inventario]
      summary: Lista unidades únicas
      description: Obtiene una lista de todas las unidades de medida únicas
      responses:
        '200':
          description: Unidades obtenidas exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: ["piezas", "kilogramos", "litros", "cajas"]

  /api/inventory/inventories/:
    get:
      tags: [Inventario]
      summary: Lista inventarios
      description: Obtiene lista paginada de inventarios por albergue
      parameters:
        - name: hostel
          in: query
          schema:
            type: string
            format: uuid
        - name: is_active
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInventories'

    post:
      tags: [Inventario]
      summary: Crear inventario
      description: Crea un nuevo inventario para un albergue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryCreate'
      responses:
        '201':
          description: Inventario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          description: Datos inválidos

  /api/inventory/inventory-items/:
    get:
      tags: [Inventario]
      summary: Lista artículos en inventarios
      description: Obtiene lista de artículos con su stock en inventarios específicos
      parameters:
        - name: inventory
          in: query
          schema:
            type: string
            format: uuid
        - name: item__category
          in: query
          schema:
            type: string
        - name: search
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInventoryItems'

    post:
      tags: [Inventario]
      summary: Agregar artículo a inventario
      description: Agrega un artículo específico a un inventario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItemCreate'
      responses:
        '201':
          description: Artículo agregado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '400':
          description: Datos inválidos

  /api/inventory/inventory-items/low-stock/:
    get:
      tags: [Inventario]
      summary: Artículos con stock bajo
      description: Obtiene lista de artículos con stock por debajo del mínimo
      parameters:
        - name: threshold
          in: query
          schema:
            type: integer
            default: 5
        - name: inventory
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Lista obtenida exitosamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'

components:
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: 'Token de autenticación: Token <token>'

  schemas:
    # ========================================================================
    # ESQUEMAS DE USUARIOS
    # ========================================================================
    
    PreRegisterUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
          example: "Juan"
        last_name:
          type: string
          example: "Pérez"
        phone_number:
          type: string
          example: "+52 1234567890"
        age:
          type: integer
          example: 25
        gender:
          type: string
          enum: [M, F]
          example: "M"
        status:
          type: string
          enum: [pending, approved, rejected]
          example: "pending"
        privacy_policy_accepted:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PreRegisterUserCreate:
      type: object
      required: [first_name, last_name, phone_number, age, gender, privacy_policy_accepted]
      properties:
        first_name:
          type: string
          example: "Juan"
        last_name:
          type: string
          example: "Pérez"
        phone_number:
          type: string
          example: "+52 1234567890"
        age:
          type: integer
          example: 25
        gender:
          type: string
          enum: [M, F]
          example: "M"
        privacy_policy_accepted:
          type: boolean
          example: true

    PreRegisterUserUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [pending, approved, rejected]
        first_name:
          type: string
        last_name:
          type: string
        age:
          type: integer

    CustomUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        age:
          type: integer
        gender:
          type: string
          enum: [M, F]
        poverty_level:
          type: integer
          minimum: 1
          maximum: 10
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    CustomUserCreate:
      type: object
      required: [first_name, last_name, phone_number, age, gender, poverty_level]
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        age:
          type: integer
        gender:
          type: string
          enum: [M, F]
        poverty_level:
          type: integer
          minimum: 1
          maximum: 10

    AdminUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        is_active:
          type: boolean
        is_superuser:
          type: boolean
        last_login:
          type: string
          format: date-time

    AdminUserCreate:
      type: object
      required: [username, password, email]
      properties:
        username:
          type: string
        password:
          type: string
          format: password
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email

    AdminLogin:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
          format: password

    AdminLoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/AdminUser'

    # ========================================================================
    # ESQUEMAS DE ALBERGUES
    # ========================================================================

    Location:
      type: object
      properties:
        id:
          type: string
          format: uuid
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zip_code:
          type: string
        country:
          type: string
          default: "México"
        landmarks:
          type: string

    LocationCreate:
      type: object
      required: [latitude, longitude, address, city, state]
      properties:
        latitude:
          type: number
          format: float
        longitude:
          type: number
          format: float
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zip_code:
          type: string
        landmarks:
          type: string

    Hostel:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        phone:
          type: string
        men_capacity:
          type: integer
        women_capacity:
          type: integer
        is_active:
          type: boolean
        location:
          $ref: '#/components/schemas/Location'
        created_at:
          type: string
          format: date-time

    HostelCreate:
      type: object
      required: [name, phone, men_capacity, women_capacity, location]
      properties:
        name:
          type: string
        phone:
          type: string
        men_capacity:
          type: integer
          minimum: 0
        women_capacity:
          type: integer
          minimum: 0
        location:
          $ref: '#/components/schemas/LocationCreate'

    HostelNearby:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        phone:
          type: string
        distance:
          type: number
          format: float
        available_men:
          type: integer
        available_women:
          type: integer
        location:
          $ref: '#/components/schemas/Location'

    HostelReservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        hostel:
          type: string
          format: uuid
        type:
          type: string
          enum: [individual, family, group]
        status:
          type: string
          enum: [pending, confirmed, cancelled, completed]
        arrival_date:
          type: string
          format: date
        departure_date:
          type: string
          format: date
        men_quantity:
          type: integer
        women_quantity:
          type: integer
        created_at:
          type: string
          format: date-time

    HostelReservationCreate:
      type: object
      required: [user, hostel, type, arrival_date, men_quantity, women_quantity]
      properties:
        user:
          type: string
          format: uuid
        hostel:
          type: string
          format: uuid
        type:
          type: string
          enum: [individual, family, group]
        arrival_date:
          type: string
          format: date
        departure_date:
          type: string
          format: date
        men_quantity:
          type: integer
          minimum: 0
        women_quantity:
          type: integer
          minimum: 0

    # ========================================================================
    # ESQUEMAS DE SERVICIOS
    # ========================================================================

    Service:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
        reservation_type:
          type: string
          enum: [individual, family, group]
        needs_approval:
          type: boolean
        max_time:
          type: integer
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    ServiceCreate:
      type: object
      required: [name, price, reservation_type]
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: decimal
        reservation_type:
          type: string
          enum: [individual, family, group]
        needs_approval:
          type: boolean
          default: false
        max_time:
          type: integer

    HostelService:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostel:
          type: string
          format: uuid
        service:
          $ref: '#/components/schemas/Service'
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    HostelServiceCreate:
      type: object
      required: [hostel, service]
      properties:
        hostel:
          type: string
          format: uuid
        service:
          type: string
          format: uuid
        is_active:
          type: boolean
          default: true

    ServiceReservation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        service:
          type: string
          format: uuid
        type:
          type: string
          enum: [individual, family, group]
        status:
          type: string
          enum: [pending, confirmed, cancelled, completed]
        datetime_reserved:
          type: string
          format: date-time
        men_quantity:
          type: integer
        women_quantity:
          type: integer
        created_at:
          type: string
          format: date-time

    ServiceReservationCreate:
      type: object
      required: [user, service, type, datetime_reserved, men_quantity, women_quantity]
      properties:
        user:
          type: string
          format: uuid
        service:
          type: string
          format: uuid
        type:
          type: string
          enum: [individual, family, group]
        datetime_reserved:
          type: string
          format: date-time
        men_quantity:
          type: integer
          minimum: 0
        women_quantity:
          type: integer
          minimum: 0

    # ========================================================================
    # ESQUEMAS DE INVENTARIO
    # ========================================================================

    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        category:
          type: string
        unit:
          type: string
        is_active:
          type: boolean
        created_at:
          type: string
          format: date-time

    ItemCreate:
      type: object
      required: [name, category, unit]
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
        unit:
          type: string

    Inventory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostel:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        is_active:
          type: boolean
        last_updated:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time

    InventoryCreate:
      type: object
      required: [hostel, name]
      properties:
        hostel:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string

    InventoryItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        inventory:
          type: string
          format: uuid
        item:
          $ref: '#/components/schemas/Item'
        quantity:
          type: integer
        minimum_stock:
          type: integer
        is_active:
          type: boolean
        last_updated:
          type: string
          format: date-time

    InventoryItemCreate:
      type: object
      required: [inventory, item, quantity]
      properties:
        inventory:
          type: string
          format: uuid
        item:
          type: string
          format: uuid
        quantity:
          type: integer
          minimum: 0
        minimum_stock:
          type: integer
          minimum: 0
          default: 0

    # ========================================================================
    # ESQUEMAS DE PAGINACIÓN
    # ========================================================================

    PaginatedPreRegisterUsers:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/PreRegisterUser'

    PaginatedCustomUsers:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/CustomUser'

    PaginatedAdminUsers:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/AdminUser'

    PaginatedLocations:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Location'

    PaginatedHostels:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Hostel'

    PaginatedHostelReservations:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/HostelReservation'

    PaginatedServices:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Service'

    PaginatedHostelServices:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/HostelService'

    PaginatedServiceReservations:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/ServiceReservation'

    PaginatedItems:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Item'

    PaginatedInventories:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/Inventory'

    PaginatedInventoryItems:
      type: object
      properties:
        count:
          type: integer
        next:
          type: string
          format: uri
          nullable: true
        previous:
          type: string
          format: uri
          nullable: true
        results:
          type: array
          items:
            $ref: '#/components/schemas/InventoryItem'

security:
  - TokenAuth: []